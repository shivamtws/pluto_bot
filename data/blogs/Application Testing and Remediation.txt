*Application Testing and Remediation with Self-Healing Technology

In my previous blog, I highlighted how Goliath is configured out-of-the-box with the hundreds of data points for your EUC environment.  This is a great and valuable tool to help get you started.  But just knowing what is good versus bad only helps so much.  That’s where the automation component of Goliath comes in and takes the next step.  It can save you from getting pinged in the middle of the night, and more importantly, can keep your business running. Citrix XenApp & XenDesktop, Citrix XenServer, Nutanix, RDS, vCenter

Self-Healing  After being in IT for long enough, we all have our own collection of scripts and go-to resolutions for issues.  When that P1 ticket comes in at 2AM because services aren’t online, we have a solid idea of what to do.  This is a good thing, as we’re able to leverage our knowledge and experience.  However, that knowledge and experience could be put to better use within your organization during the day.  Whenever I’ve been responsible for the admin side of things, monthly patching always made me cringe.  It wasn’t because I didn’t think that software patches were necessary, quite the contrary.  My frustration was always that the validation was incomplete.  Across many enterprises the typical validation I would see was if the expected patches pushed installed successfully.  Rarely does the validation include if the services on the server patched come back online as expected.  Was the application it serves out running post patching?  Next thing you know, the P1 alert goes out.  All of these are known issues and resolutions.  Either by monitoring rules or scripts developed, these problems can be remediated without waking up the admins, saving them for more important work.  I know I would have appreciated a tool doing that for me and being able to sleep and have a clear mind in the morning.  Goliath’s built-in automations can look for the desired state of a service.  Or, based on an alert, a script can be run to rectify the situation. These can allow everyone to sleep at night, the business can continue unencumbered, and less coffee is needed come morning. 

Logon Testing  Just checking for services is one thing, but even then, it doesn’t always ensure that things are working as expected.  To really make sure the environment is working as expected, the proof is in the launching of the application.  That’s where the real beauty of the Goliath solution comes in.  Goliath allows the ability to set up automated logon testing to ensure resources are available. The automated logon testing allows you to test applications launching from one or multiple locations, even remote testing!  So besides just testing, you can test all the different use cases you have, not just one office or just the local network.    This logon testing is even useful in a lab scenario where it doesn’t impact end users.  I made a DNS change in my internal lab a few months back.  Because of this DNS change my Storefront got the wonderful ‘Cannot complete request’ loop.  Thankfully, I was able to quickly see what was going on because unlike most synthetic logon tools, Goliath’s application availability monitor takes screenshots of the logon process.  So not only was I able to see that the logon failed, but I could step through the end-user experience.    Most of the time a report comes in that a user is experiencing a problem and you have reached out to them and hope that the problem happens again to be able to resolve it.  Or even better, try to get an accurate description of what happened.  Having a tool that can screenshot the failure points and allow you to step through them makes troubleshooting and resolving much faster and easier.  Now as an administrator you are no longer dependent on end users to alert you when issues arise, since consistent tests will alert you to issues before users are impacted.   

Goliath’s Application Availability Monitor

In addition to having the ability to walk through the replay of the logon, the Goliath solution has another advantage.  It can test multiple solutions from the same interface.  Sure, we all like to think that we will end up with one homogenous solution, but it doesn’t always end up that way.  I have come across so many situations where there is an old RDP environment supporting one business units’ applications while the rest of the org is on Citrix.  Or a customer that was on Horizon View and migrated to Citrix, but that one use case didn’t work properly when migrated and the application is no longer supported so it was just easier to leave the Horizon environment in place.  There can be a variety of reasons, but the major point is that it happens.  With many of the vendor solutions, you’d be setting up all sorts of different separate testing environments.  With Goliath you can test RDP, Horizon, Citrix, all, some, etc.  But wait – it gets better!  The two can be combined.  In addition to testing the logon process, if an issue does arise a remediation action can be applied.  Now, if a particular application or server hosting an application set doesn’t respond as expected, actions can be taken to fix the problem before the user reports start rolling in.  You as the administrator can look like a real hero in that you have a solution that determines, and FIXES, problems before a user can even report them. 

Conclusion Goliath gives you the tools to be the big hero without having to put in a ton of work; and isn’t that the solution we all want?  Maximum output with minimum input.  By leveraging the wisdom of EUC experts through the years, Goliath has a base of knowledge to start from to ensure your environment is functioning at its best.  Add the flexibility plus the environment-specific knowledge that you bring, and it makes for a well-rounded solution.  The environment can continuously test itself and remediate itself, allowing you to tackle the more strategic needs of your organization.

Benjamin Crill Citrix CTP,  consulting on end user computing technologies for over 15 years (Citrix XenApp/XenDesktop, Horizon View, IGEL, etc), Benjamin focuses on viewing how systems fit together and impact each other.  From storage to servers to network to thin clients and all in between, Ben examines the interaction and figuring out how to make the system hum!